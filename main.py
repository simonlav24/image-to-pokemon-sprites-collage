from math import fabs, sqrt, cos, sin, pi, floor, ceil
from random import uniform, randint, choice
import pygame
pygame.init()

pygame.font.init()
myfont = pygame.font.SysFont('Arial', 12)

image = pygame.image.load("assets\housesMed.jpg")

winWidth = image.get_width()
winHeight = image.get_height()
win = pygame.display.set_mode((winWidth,winHeight))


################################################################################ Setup

used = pygame.Surface(win.get_size())
result = pygame.Surface(win.get_size())

result.fill((255,255,255))

sprites = []

READ_DIMS = 0
READ_COLOR = 1

mode = READ_DIMS
width = 0
height = 0
counter = 0
surf = None
x = 0
y = 0

with open("sprites.bin", "rb") as f:
	byte = f.read(1)
	while byte != b"":
		if mode == READ_DIMS:
			width = int.from_bytes(byte, "big")
			byte = f.read(1)
			height = int.from_bytes(byte, "big")
			surf = pygame.Surface((width, height), pygame.SRCALPHA)
			x = 0
			y = 0
			mode = READ_COLOR
			counter = width * height
		elif mode == READ_COLOR:
			R = int.from_bytes(byte, "big")
			byte = f.read(1)
			G = int.from_bytes(byte, "big")
			byte = f.read(1)
			B = int.from_bytes(byte, "big")
			
			if not (R == 165 and G == 235 and B == 255):
				surf.set_at((x, y), (R, G, B))
			x += 1
			if x == width:
				x = 0
				y += 1
			counter -= 1
			if counter == 0:
				sprites.append(surf)
				mode = READ_DIMS
		
		byte = f.read(1)

ready = []

if False:#creates "ready" which includes (sprite, color)
	for sprite in sprites: 
		
		colors = {}
		for i in range(500):
			x = randint(0, sprite.get_width()-1)
			y = randint(0, sprite.get_height()-1)
			
			col = sprite.get_at((x,y))
			
			if col[3] == 0:
				i -= 1
				continue
			
			col = (col[0], col[1], col[2])
			if col in colors:
				colors[col] += 1
			else:
				colors[col] = 1

		maxcol = max(colors.items(), key=operator.itemgetter(1))[0]
		ready.append((sprite, maxcol))

def colorCompare(col, epsilon):
	
	for r in ready:
		if col[0] > r[1][0] - epsilon and col[0] < r[1][0] + epsilon and\
		   col[1] > r[1][1] - epsilon and col[1] < r[1][1] + epsilon and\
		   col[2] > r[1][2] - epsilon and col[2] < r[1][2] + epsilon:
			return r[0]
	return None

if False: #draw pokemons on screen for fun
	#white back:
	result.fill((255,255,255))
	
	
	
	# for i in range(1000):
		# pick = choice(sprites)
		# pos = (randint(0, winWidth-1), randint(0, winHeight-1))
	fin = False
	for y in range(0, winHeight):
		for x in range(0, winWidth):
			
			# if len(sprites) == 0:
				# fin = True
				# break
				
			pick = choice(sprites)
			pos = (x,y)
			
			if used.get_at(pos)[0] == 255:
				continue
			
			
			radius = max([pick.get_width()//2, pick.get_height()//2])
			
			draw = True
			for i in range(10):
				checkX = int(pos[0] + radius * cos(2*pi*i/10))
				checkY = int(pos[1] + radius * sin(2*pi*i/10))
				
				if checkX < 0 or checkX >= winWidth or checkY < 0 or checkY >= winHeight:
					continue
				
				if used.get_at((checkX, checkY)) == (255,0,0):
					draw = False
					break
			
			if draw:
				# sprites.remove(pick)
				result.blit(pick, (pos[0] - pick.get_width()/2, pos[1] - pick.get_height()/2))
				pygame.draw.circle(used, (255,0,0), pos, radius)
		# if fin:
			# break
	mode = False

def deltaE(color1, color2, Kl=1, Kc=1, Kh=1):
    """
    Calculates the Delta E (CIE2000) of two colors.
    """
    color1_vector = _get_lab_color1_vector(color1)
    color2_matrix = _get_lab_color2_matrix(color2)
    delta_e = color_diff_matrix.delta_e_cie2000(
        color1_vector, color2_matrix, Kl=Kl, Kc=Kc, Kh=Kh)[0]
    return numpy.asscalar(delta_e)

if True:#INDEX COLOR
	indexColor = [[0, []], [1, [(56, 144, 120, 255), (96, 208, 160, 255), (128, 232, 192, 255)]], [2, [(32, 144, 88, 255), (88, 200, 144, 255), (128, 232, 192, 255)]], [3, [(88, 200, 144, 255), (128, 232, 192, 255), (104, 200, 64, 255)]], [4, [(216, 80, 32, 255), (248, 144, 64, 255)]], [5, [(208, 72, 32, 255), (248, 104, 72, 255)]], [6, [(216, 96, 32, 255), (248, 144, 64, 255), (248, 208, 104, 255)]], [7, [(88, 168, 152, 255), (144, 208, 200, 255)]], [8, []], [9, []], [10, [(112, 168, 48, 255)]], [11, [(112, 168, 48, 255), (152, 208, 72, 255)]], [12, []], [13, [(200, 112, 16, 255)]], [14, [(224, 168, 88, 255), (248, 208, 104, 255)]], [15, []], [16, [(224, 184, 96, 255), (248, 240, 184, 255)]], [17, [(240, 240, 160, 255), (168, 120, 88, 255), (248, 232, 88, 255)]], [18, [(224, 184, 96, 255), (120, 88, 72, 255)]], [19, [(176, 112, 176, 255), (208, 144, 208, 255)]], [20, [(240, 240, 160, 255), (248, 232, 88, 255), (192, 152, 64, 255)]], [21, [(168, 112, 16, 255), (232, 216, 168, 255)]], [22, [(208, 152, 56, 255), (240, 176, 88, 255)]], [23, [(184, 112, 160, 255), (152, 72, 128, 255)]], [24, [(184, 112, 160, 255), (152, 72, 128, 255)]], [25, [(232, 184, 0, 255), (248, 232, 0, 255)]], [26, [(232, 152, 0, 255), (248, 192, 0, 255)]], [27, [(224, 224, 0, 255), (208, 184, 0, 255)]], [28, [(152, 120, 16, 255), (200, 176, 72, 255)]], [29, [(136, 192, 200, 255), (192, 224, 232, 255)]], [30, [(136, 192, 200, 255), (192, 224, 232, 255)]], [31, [(136, 192, 200, 255), (80, 144, 184, 255)]], [32, [(184, 96, 184, 255), (224, 152, 208, 255)]], [33, [(224, 152, 208, 255), (184, 96, 184, 255)]], [34, [(184, 96, 184, 255), (224, 152, 208, 255)]], [35, [(224, 128, 120, 255), (248, 192, 160, 255)]], [36, [(248, 152, 128, 255), (248, 192, 160, 255)]], [37, [(216, 152, 88, 255), (184, 72, 0, 255), (216, 104, 40, 255)]], [38, [(248, 208, 104, 255), (248, 232, 160, 255)]], [39, [(248, 168, 160, 255), (248, 200, 192, 255)]], [40, [(248, 192, 168, 255)]], [41, [(120, 112, 184, 255)]], [42, [(120, 112, 200, 255)]], [43, []], [44, []], [45, []], [46, [(224, 184, 80, 255), (232, 216, 136, 255)]], [47, [(248, 88, 88, 255), (224, 48, 48, 255), (176, 64, 48, 255), (216, 104, 48, 255)]], [48, [(176, 120, 192, 255), (144, 80, 160, 255)]], [49, [(248, 224, 248, 255), (232, 192, 248, 255)]], [50, [(160, 88, 32, 255), (192, 120, 64, 255)]], [51, [(160, 88, 32, 255), (192, 120, 64, 255)]], [52, [(248, 224, 128, 255), (248, 248, 176, 255)]], [53, [(248, 248, 168, 255), (248, 224, 128, 255)]], [54, [(224, 160, 48, 255), (248, 208, 72, 255), (248, 216, 160, 255)]], [55, [(88, 120, 168, 255), (144, 176, 208, 255)]], [56, [(232, 208, 128, 255), (240, 232, 160, 255)]], [57, [(216, 184, 136, 255), (248, 224, 176, 255)]], [58, [(192, 120, 16, 255)]], [59, []], [60, [(128, 136, 176, 255), (96, 104, 144, 255)]], [61, [(96, 104, 144, 255)]], [62, [(176, 184, 224, 255)]], [63, [(248, 232, 40, 255), (208, 176, 0, 255)]], [64, [(248, 232, 40, 255), (208, 176, 0, 255)]], [65, [(208, 176, 0, 255), (136, 96, 16, 255)]], [66, [(112, 152, 120, 255), (184, 224, 192, 255), (152, 192, 160, 255)]], [67, [(184, 168, 216, 255), (144, 120, 176, 255)]], [68, [(168, 208, 176, 255), (96, 160, 96, 255)]], [69, []], [70, []], [71, []], [72, [(72, 144, 192, 255), (104, 176, 224, 255)]], [73, [(104, 176, 224, 255), (72, 144, 192, 255)]], [74, [(112, 120, 48, 255), (168, 176, 96, 255)]], [75, [(168, 176, 96, 255), (120, 128, 48, 255)]], [76, [(176, 184, 96, 255), (96, 104, 32, 255), (208, 176, 88, 255), (152, 136, 56, 255)]], [77, [(232, 0, 0, 255), (248, 224, 32, 255)]], [78, [(248, 232, 120, 255), (248, 192, 80, 255), (248, 96, 0, 255), (248, 224, 32, 255)]], [79, [(248, 128, 96, 255), (240, 64, 32, 255), (248, 160, 128, 255)]], [80, [(224, 80, 40, 255), (248, 136, 104, 255)]], [81, [(144, 184, 152, 255), (208, 240, 216, 255)]], [82, [(208, 240, 216, 255), (176, 208, 184, 255)]], [83, [(224, 224, 160, 255), (192, 192, 128, 255)]], [84, [(144, 104, 72, 255), (184, 136, 80, 255)]], [85, [(160, 120, 72, 255), (200, 152, 80, 255)]], [86, [(192, 200, 232, 255), (224, 224, 240, 255)]], [87, [(192, 200, 232, 255), (224, 224, 240, 255), (248, 248, 248, 255)]], [88, [(144, 88, 152, 255), (192, 152, 176, 255)]], [89, [(144, 88, 152, 255), (192, 152, 176, 255)]], [90, [(216, 184, 232, 255), (176, 136, 184, 255)]], [91, [(168, 120, 184, 255), (144, 144, 144, 255), (120, 80, 128, 255)]], [92, [(112, 72, 104, 255), (80, 48, 88, 255), (208, 168, 200, 255), (136, 96, 128, 255)]], [93, [(128, 88, 160, 255), (192, 128, 200, 255)]], [94, [(128, 64, 120, 255), (168, 96, 144, 255), (192, 128, 176, 255)]], [95, [(216, 208, 208, 255), (184, 176, 176, 255), (128, 120, 120, 255)]], [96, [(216, 184, 16, 255), (248, 216, 64, 255)]], [97, [(200, 176, 104, 255), (248, 216, 96, 255), (248, 232, 152, 255)]], [98, [(216, 96, 32, 255)]], [99, [(232, 136, 72, 255), (192, 104, 56, 255)]], [100, [(248, 80, 32, 255)]], [101, [(224, 64, 0, 255), (232, 232, 232, 255)]], [102, [(248, 176, 136, 255), (248, 208, 168, 255), (224, 104, 80, 255)]], [103, []], [104, []], [105, [(144, 104, 48, 255), (192, 152, 72, 255), (216, 184, 104, 255)]], [106, [(160, 120, 88, 255), (200, 160, 128, 255)]], [107, []], [108, [(224, 72, 24, 255), (232, 104, 80, 255), (248, 128, 80, 255)]], [109, [(144, 80, 136, 255), (184, 120, 176, 255)]], [110, [(208, 160, 168, 255), (176, 104, 136, 255), (208, 160, 168, 255)]], [111, [(128, 128, 168, 255), (184, 184, 200, 255)]], [112, [(136, 136, 144, 255), (192, 192, 184, 255)]], [113, [(240, 112, 112, 255), (248, 168, 168, 255), (248, 208, 208, 255)]], [114, [(16, 16, 16, 255), (128, 184, 208, 255), (64, 120, 144, 255)]], [115, [(184, 160, 104, 255), (152, 120, 64, 255)]], [116, [(104, 144, 176, 255), (184, 216, 248, 255)]], [117, [(128, 168, 200, 255), (104, 128, 152, 255)]], [118, []], [119, []], [120, [(208, 176, 112, 255), (160, 128, 48, 255)]], [121, [(128, 64, 128, 255), (168, 120, 176, 255)]], [122, [(224, 96, 72, 255)]], [123, [(152, 216, 72, 255), (96, 184, 32, 255), (184, 248, 112, 255)]], [124, [(232, 120, 80, 255)]], [125, [(248, 208, 104, 255), (248, 224, 152, 255)]], [126, [(232, 48, 0, 255), (248, 112, 16, 255), (248, 240, 104, 255), (248, 208, 0, 255)]], [127, [(192, 168, 136, 255), (144, 120, 96, 255), (160, 160, 128, 255)]], [128, [(232, 192, 80, 255), (120, 96, 40, 255), (232, 192, 80, 255)]], [129, [(248, 104, 32, 255), (248, 168, 112, 255)]], [130, [(128, 160, 224, 255), (96, 128, 160, 255)]], [131, [(112, 144, 200, 255), (152, 184, 224, 255)]], [132, [(208, 112, 160, 255), (232, 152, 208, 255)]], [133, [(192, 144, 80, 255), (192, 176, 112, 255)]], [134, [(56, 160, 136, 255), (48, 64, 120, 255)]], [135, [(208, 184, 48, 255), (248, 248, 128, 255)]], [136, [(232, 200, 8, 255), (248, 136, 0, 255)]], [137, []], [138, []], [139, []], [140, [(184, 136, 40, 255), (152, 104, 8, 255), (112, 64, 16, 255)]], [141, [(216, 192, 136, 255), (176, 152, 96, 255)]], [142, [(144, 168, 176, 255), (200, 208, 216, 255)]], [143, []], [144, [(168, 208, 248, 255), (96, 144, 200, 255), (56, 104, 160, 255)]], [145, [(248, 232, 0, 255), (248, 232, 0, 255)]], [146, [(248, 216, 16, 255), (248, 96, 0, 255)]], [147, [(160, 128, 192, 255)]], [148, [(48, 120, 168, 255)]], [149, [(200, 168, 80, 255), (240, 208, 112, 255)]], [150, []], [151, [(248, 192, 200, 255), (248, 128, 120, 255)]], [152, [(200, 232, 96, 255), (152, 192, 8, 255)]], [153, [(240, 232, 104, 255), (216, 184, 40, 255)]], [154, []], [155, []], [156, []], [157, []], [158, [(104, 176, 224, 255), (104, 176, 224, 255)]], [159, [(88, 168, 224, 255)]], [160, [(88, 168, 224, 255), (48, 128, 192, 255), (128, 200, 248, 255)]], [161, [(224, 192, 80, 255), (144, 104, 32, 255)]], [162, [(248, 232, 144, 255), (152, 96, 72, 255)]], [163, [(216, 208, 88, 255), (120, 104, 16, 255), (168, 152, 32, 255)]], [164, [(224, 200, 96, 255), (200, 160, 64, 255), (120, 88, 72, 255)]], [165, [(232, 80, 24, 255)]], [166, [(248, 88, 32, 255)]], [167, [(144, 224, 64, 255), (200, 248, 112, 255)]], [168, [(248, 120, 40, 255), (200, 80, 0, 255)]], [169, [(192, 88, 200, 255)]], [170, [(96, 120, 208, 255), (160, 200, 248, 255)]], [171, [(96, 136, 224, 255), (136, 168, 248, 255)]], [172, [(248, 248, 192, 255), (248, 232, 128, 255)]], [173, [(248, 160, 128, 255), (248, 200, 152, 255), (120, 72, 0, 255)]], [174, [(248, 200, 152, 255), (248, 144, 112, 255)]], [175, [(240, 240, 248, 255), (200, 200, 200, 255)]], [176, [(248, 248, 248, 255), (168, 168, 184, 255)]], [177, [(80, 192, 72, 255), (152, 224, 72, 255)]], [178, []], [179, [(248, 232, 128, 255), (224, 192, 96, 255)]], [180, [(248, 144, 120, 255), (248, 192, 160, 255)]], [181, [(248, 232, 72, 255), (248, 192, 16, 255)]], [182, [(80, 192, 48, 255), (152, 208, 72, 255)]], [183, [(104, 144, 248, 255), (72, 112, 248, 255)]], [184, [(88, 168, 224, 255)]], [185, [(224, 192, 104, 255), (184, 152, 80, 255), (144, 112, 48, 255)]], [186, [(120, 184, 24, 255)]], [187, []], [188, [(64, 168, 32, 255), (96, 200, 56, 255), (136, 232, 56, 255)]], [189, []], [190, [(136, 56, 176, 255), (176, 96, 224, 255)]], [191, [(208, 200, 48, 255), (104, 96, 48, 255)]], [192, []], [193, []], [194, [(136, 192, 240, 255), (72, 152, 208, 255)]], [195, [(96, 160, 224, 255), (168, 200, 232, 255)]], [196, [(176, 112, 224, 255), (208, 168, 224, 255)]], [197, [(88, 80, 80, 255), (144, 128, 128, 255)]], [198, [(136, 160, 160, 255), (56, 80, 80, 255)]], [199, [(224, 104, 48, 255), (248, 176, 112, 255)]], [200, [(112, 152, 144, 255)]], [201, [(112, 112, 112, 255)]], [202, [(72, 152, 184, 255), (104, 184, 216, 255), (152, 208, 232, 255)]], [203, []], [204, [(176, 232, 240, 255), (56, 112, 160, 255), (80, 168, 176, 255)]], [205, [(224, 176, 224, 255), (192, 128, 184, 255), (168, 72, 136, 255)]], [206, []], [207, [(176, 128, 208, 255), (216, 184, 248, 255)]], [208, [(128, 152, 168, 255), (184, 200, 192, 255), (216, 224, 216, 255)]], [209, [(224, 96, 104, 255), (232, 176, 160, 255)]], [210, [(232, 184, 248, 255), (224, 152, 232, 255), (208, 112, 208, 255)]], [211, [(72, 88, 160, 255), (88, 128, 192, 255), (112, 168, 232, 255)]], [212, [(200, 56, 0, 255), (248, 96, 16, 255), (248, 192, 112, 255)]], [213, [(192, 56, 16, 255), (248, 248, 248, 255)]], [214, [(96, 104, 176, 255), (120, 136, 216, 255)]], [215, [(56, 88, 72, 255), (136, 168, 152, 255)]], [216, [(160, 128, 56, 255), (248, 240, 160, 255)]], [217, [(192, 160, 80, 255), (160, 128, 56, 255)]], [218, [(216, 88, 32, 255), (248, 128, 72, 255)]], [219, [(216, 88, 32, 255), (248, 128, 72, 255)]], [220, [(192, 160, 80, 255), (160, 128, 56, 255)]], [221, [(192, 160, 80, 255), (160, 128, 56, 255)]], [222, [(248, 168, 192, 255), (224, 104, 136, 255)]], [223, [(176, 216, 208, 255), (136, 168, 184, 255)]], [224, [(240, 104, 48, 255), (248, 176, 104, 255), (208, 56, 16, 255)]], [225, [(208, 64, 0, 255)]], [226, [(208, 184, 200, 255), (224, 200, 224, 255), (240, 224, 240, 255)]], [227, [(160, 160, 168, 255), (192, 192, 200, 255), (224, 224, 232, 255)]], [228, [(80, 72, 72, 255), (56, 48, 48, 255)]], [229, [(80, 72, 72, 255), (136, 120, 120, 255), (56, 48, 48, 255)]], [230, [(72, 152, 184, 255), (152, 184, 240, 255)]], [231, [(96, 144, 192, 255), (152, 184, 232, 255)]], [232, [(208, 200, 200, 255), (120, 152, 152, 255), (160, 192, 192, 255), (168, 160, 160, 255)]], [233, []], [234, [(224, 176, 88, 255), (248, 248, 168, 255), (176, 128, 48, 255)]], [235, [(216, 216, 184, 255), (136, 128, 80, 255), (168, 168, 136, 255)]], [236, [(232, 168, 248, 255), (176, 48, 0, 255)]], [237, [(248, 232, 152, 255), (184, 160, 80, 255)]], [238, []], [239, [(240, 192, 72, 255), (224, 168, 0, 255)]], [240, [(248, 120, 96, 255)]], [241, [(248, 168, 160, 255), (208, 120, 112, 255)]], [242, [(248, 168, 192, 255), (232, 120, 152, 255)]], [243, [(208, 152, 40, 255), (248, 200, 64, 255)]], [244, [(128, 96, 32, 255), (216, 184, 96, 255), (248, 224, 144, 255)]], [245, [(88, 112, 208, 255), (168, 104, 248, 255), (136, 48, 224, 255)]], [246, [(176, 216, 176, 255), (72, 96, 72, 255)]], [247, [(112, 152, 192, 255), (136, 192, 232, 255)]], [248, [(160, 208, 160, 255), (112, 160, 112, 255)]], [249, [(248, 248, 248, 255), (216, 216, 224, 255)]], [250, []], [251, [(64, 184, 64, 255), (232, 248, 208, 255)]], [252, [(152, 208, 72, 255), (112, 168, 48, 255), (72, 136, 88, 255)]], [253, [(56, 128, 144, 255), (184, 248, 176, 255), (88, 176, 104, 255), (80, 160, 184, 255)]], [254, [(152, 208, 72, 255), (112, 168, 48, 255)]], [255, [(248, 104, 56, 255), (248, 192, 80, 255)]], [256, [(248, 208, 96, 255), (248, 104, 56, 255), (208, 88, 56, 255)]], [257, [(248, 120, 80, 255), (216, 96, 48, 255), (248, 208, 104, 255)]], [258, [(48, 128, 192, 255), (88, 168, 224, 255), (120, 192, 248, 255)]], [259, [(144, 208, 208, 255), (216, 216, 248, 255)]], [260, [(192, 224, 248, 255), (48, 128, 192, 255), (168, 184, 224, 255), (80, 104, 160, 255)]], [261, [(192, 184, 200, 255), (72, 80, 96, 255)]], [262, [(48, 48, 64, 255), (192, 200, 208, 255)]], [263, [(168, 120, 88, 255), (192, 168, 136, 255)]], [264, [(136, 96, 64, 255), (216, 208, 176, 255)]], [265, [(200, 80, 88, 255), (240, 120, 96, 255)]], [266, [(232, 232, 224, 255), (216, 208, 224, 255), (248, 248, 248, 255)]], [267, []], [268, [(216, 176, 224, 255), (232, 208, 224, 255), (232, 224, 248, 255)]], [269, []], [270, [(72, 136, 40, 255), (120, 208, 72, 255)]], [271, [(168, 208, 56, 255), (128, 144, 64, 255), (216, 248, 192, 255)]], [272, [(152, 192, 96, 255), (152, 192, 96, 255)]], [273, [(208, 176, 80, 255), (152, 88, 48, 255), (240, 192, 96, 255)]], [274, [(200, 152, 96, 255), (152, 120, 152, 255)]], [275, [(216, 120, 80, 255), (152, 88, 96, 255)]], [276, [(72, 88, 144, 255)]], [277, [(64, 80, 120, 255), (88, 104, 168, 255)]], [278, [(240, 232, 248, 255), (192, 184, 224, 255)]], [279, [(248, 208, 96, 255), (224, 168, 88, 255)]], [280, []], [281, []], [282, []], [283, [(88, 136, 176, 255), (120, 192, 208, 255)]], [284, []], [285, [(232, 192, 136, 255), (248, 224, 168, 255)]], [286, [(144, 184, 72, 255), (112, 144, 48, 255)]], [287, [(176, 144, 104, 255), (224, 200, 160, 255)]], [288, [(200, 200, 200, 255), (224, 224, 224, 255)]], [289, [(208, 200, 176, 255), (168, 136, 104, 255)]], [290, [(224, 208, 208, 255), (176, 168, 144, 255)]], [291, []], [292, [(176, 160, 56, 255), (112, 88, 40, 255)]], [293, [(232, 144, 208, 255), (248, 160, 232, 255)]], [294, [(88, 80, 136, 255), (160, 152, 216, 255)]], [295, [(80, 72, 136, 255), (184, 184, 232, 255)]], [296, [(248, 208, 80, 255), (200, 152, 80, 255)]], [297, [(168, 96, 64, 255), (232, 184, 80, 255)]], [298, [(104, 144, 248, 255), (152, 184, 248, 255)]], [299, [(144, 184, 176, 255), (128, 144, 160, 255), (184, 208, 216, 255)]], [300, [(248, 128, 104, 255)]], [301, [(248, 184, 64, 255), (248, 216, 96, 255), (248, 248, 152, 255)]], [302, [(160, 112, 160, 255), (192, 120, 184, 255)]], [303, []], [304, [(216, 200, 200, 255)]], [305, [(168, 168, 168, 255), (136, 136, 136, 255), (104, 104, 104, 255)]], [306, [(136, 136, 136, 255), (168, 168, 168, 255), (104, 104, 104, 255)]], [307, []], [308, [(224, 120, 120, 255), (200, 88, 80, 255)]], [309, [(152, 216, 128, 255), (104, 176, 120, 255)]], [310, []], [311, [(248, 232, 192, 255), (232, 208, 128, 255)]], [312, [(248, 232, 192, 255), (232, 208, 128, 255)]], [313, []], [314, []], [315, []], [316, [(160, 216, 144, 255), (128, 160, 112, 255)]], [317, [(184, 136, 248, 255), (208, 168, 248, 255)]], [318, []], [319, []], [320, [(48, 104, 152, 255), (96, 152, 200, 255), (72, 128, 176, 255)]], [321, [(48, 96, 248, 255), (40, 80, 120, 255), (80, 128, 248, 255)]], [322, [(240, 216, 0, 255), (200, 176, 56, 255)]], [323, [(224, 104, 24, 255), (232, 168, 72, 255)]], [324, []], [325, [(136, 136, 144, 255), (104, 112, 120, 255)]], [326, []], [327, [(224, 208, 160, 255), (240, 224, 168, 255), (192, 176, 128, 255)]], [328, [(200, 120, 112, 255), (232, 152, 72, 255), (248, 184, 120, 255)]], [329, []], [330, [(104, 160, 112, 255), (168, 216, 112, 255), (168, 216, 112, 255), (208, 248, 128, 255)]], [331, [(168, 200, 96, 255), (224, 248, 152, 255), (120, 200, 104, 255)]], [332, [(176, 208, 112, 255), (200, 232, 112, 255), (48, 128, 72, 255)]], [333, [(120, 200, 248, 255), (88, 144, 200, 255), (168, 224, 248, 255), (96, 168, 224, 255)]], [334, [(232, 240, 248, 255), (216, 216, 232, 255), (192, 192, 208, 255)]], [335, [(224, 216, 224, 255), (208, 192, 200, 255)]], [336, [(80, 72, 72, 255)]], [337, [(192, 168, 120, 255), (248, 232, 160, 255), (224, 208, 144, 255)]], [338, [(232, 144, 56, 255), (168, 96, 40, 255), (200, 120, 48, 255)]], [339, [(208, 208, 216, 255), (184, 184, 192, 255)]], [340, [(112, 136, 176, 255), (80, 96, 144, 255)]], [341, [(224, 200, 144, 255), (208, 88, 8, 255), (248, 192, 64, 255)]], [342, [(184, 64, 0, 255), (224, 104, 0, 255)]], [343, [(152, 160, 64, 255), (192, 192, 96, 255)]], [344, [(104, 104, 64, 255), (144, 152, 120, 255), (104, 104, 64, 255), (144, 152, 120, 255)]], [345, [(176, 112, 168, 255), (136, 64, 120, 255)]], [346, [(144, 224, 120, 255), (112, 176, 104, 255)]], [347, []], [348, []], [349, [(208, 208, 128, 255), (144, 128, 80, 255)]], [350, [(248, 208, 176, 255), (216, 184, 152, 255), (248, 224, 208, 255)]], [351, [(206, 191, 191, 255), (247, 247, 242, 255)]], [352, [(96, 176, 128, 255), (160, 232, 152, 255), (120, 208, 136, 255)]], [353, [(160, 160, 168, 255), (144, 128, 136, 255)]], [354, [(144, 144, 168, 255), (112, 112, 136, 255), (72, 72, 96, 255)]], [355, [(88, 88, 80, 255), (104, 104, 88, 255), (136, 136, 120, 255)]], [356, [(176, 176, 160, 255), (104, 96, 88, 255), (144, 128, 120, 255)]], [357, []], [358, []], [359, [(192, 192, 208, 255), (248, 248, 248, 255)]], [360, [(104, 184, 216, 255), (72, 152, 184, 255)]], [361, [(224, 168, 88, 255), (248, 208, 104, 255)]], [362, [(200, 200, 216, 255), (224, 224, 240, 255), (248, 248, 248, 255)]], [363, []], [364, [(104, 144, 208, 255), (136, 168, 248, 255)]], [365, [(128, 176, 224, 255), (88, 136, 192, 255), (56, 112, 168, 255)]], [366, []], [367, [(72, 152, 176, 255), (120, 192, 216, 255), (152, 216, 240, 255)]], [368, [(232, 128, 168, 255), (240, 168, 184, 255)]], [369, [(160, 136, 128, 255), (208, 184, 144, 255), (120, 96, 88, 255)]], [370, [(200, 144, 144, 255), (248, 160, 120, 255)]], [371, [(120, 120, 216, 255), (120, 112, 144, 255)]], [372, [(200, 200, 200, 255), (232, 232, 200, 255)]], [373, [(120, 120, 216, 255), (168, 168, 248, 255)]], [374, [(48, 56, 112, 255), (72, 128, 208, 255), (128, 200, 248, 255)]], [375, [(88, 160, 248, 255), (128, 200, 248, 255)]], [376, [(88, 160, 248, 255), (48, 56, 112, 255), (128, 200, 248, 255)]], [377, [(232, 224, 216, 255), (224, 216, 168, 255)]], [378, [(152, 160, 216, 255), (184, 208, 232, 255), (128, 112, 176, 255)]], [379, [(232, 232, 232, 255), (112, 112, 88, 255), (184, 184, 176, 255)]], [380, [(248, 104, 104, 255), (200, 72, 80, 255)]], [381, [(72, 128, 208, 255), (88, 160, 248, 255)]], [382, [(56, 96, 176, 255), (88, 160, 248, 255)]], [383, [(248, 32, 40, 255), (248, 120, 128, 255), (168, 40, 56, 255)]], [384, [(72, 128, 112, 255), (72, 128, 112, 255), (144, 216, 176, 255)]], [385, [(224, 192, 80, 255), (248, 224, 88, 255)]]]

if False:#create colors
	colors = {}
	for pokemon in indexColor:
		for color in pokemon[1]:
			if color in colors:
				colors[color].append(pokemon[0])
			else:
				colors[color] = [pokemon[0]]


############################################################################################################# 

colors = {(56, 144, 120, 255): [1], (96, 208, 160, 255): [1], (128, 232, 192, 255): [1, 2, 3], (32, 144, 88, 255): [2], (88, 200, 144, 255): [2, 3], (104, 200, 64, 255): [3], (216, 80, 32, 255): [4], (248, 144, 64, 255): [4, 6], (208, 72, 32, 255): [5], (248, 104, 72, 255): [5], (216, 96, 32, 255): [6, 98], (248, 208, 104, 255): [6, 14, 38, 125, 257, 361], (88, 168, 152, 255): [7], (144, 208, 200, 255): [7], (112, 168, 48, 255): [10, 11, 252, 254], (152, 208, 72, 255): [11, 182, 252, 254], (200, 112, 16, 255): [13], (224, 168, 88, 255): [14, 279, 361], (224, 184, 96, 255): [16, 18], (248, 240, 184, 255): [16], (240, 240, 160, 255): [17, 20], (168, 120, 88, 255): [17, 263], (248, 232, 88, 255): [17, 20], (120, 88, 72, 255): [18, 164], (176, 112, 176, 255): [19], (208, 144, 208, 255): [19], (192, 152, 64, 255): [20], (168, 112, 16, 255): [21], (232, 216, 168, 255): [21], (208, 152, 56, 255): [22], (240, 176, 88, 255): [22], (184, 112, 160, 255): [23, 24], (152, 72, 128, 255): [23, 24], (232, 184, 0, 255): [25], (248, 232, 0, 255): [25, 145, 145], (232, 152, 0, 255): [26], (248, 192, 0, 255): [26], (224, 224, 0, 255): [27], (208, 184, 0, 255): [27], (152, 120, 16, 255): [28], (200, 176, 72, 255): [28], (136, 192, 200, 255): [29, 30, 31], (192, 224, 232, 255): [29, 30], (80, 144, 184, 255): [31], (184, 96, 184, 255): [32, 33, 34], (224, 152, 208, 255): [32, 33, 34], (224, 128, 120, 255): [35], (248, 192, 160, 255): [35, 36, 180], (248, 152, 128, 255): [36], (216, 152, 88, 255): [37], (184, 72, 0, 255): [37], (216, 104, 40, 255): [37], (248, 232, 160, 255): [38, 337], (248, 168, 160, 255): [39, 241], (248, 200, 192, 255): [39], (248, 192, 168, 255): [40], (120, 112, 184, 255): [41], (120, 112, 200, 255): [42], (224, 184, 80, 255): [46], (232, 216, 136, 255): [46], (248, 88, 88, 255): [47], (224, 48, 48, 255): [47], (176, 64, 48, 255): [47], (216, 104, 48, 255): [47], (176, 120, 192, 255): [48], (144, 80, 160, 255): [48], (248, 224, 248, 255): [49], (232, 192, 248, 255): [49], (160, 88, 32, 255): [50, 51], (192, 120, 64, 255): [50, 51], (248, 224, 128, 255): [52, 53], (248, 248, 176, 255): [52], (248, 248, 168, 255): [53, 234], (224, 160, 48, 255): [54], (248, 208, 72, 255): [54], (248, 216, 160, 255): [54], (88, 120, 168, 255): [55], (144, 176, 208, 255): [55], (232, 208, 128, 255): [56, 311, 312], (240, 232, 160, 255): [56], (216, 184, 136, 255): [57], (248, 224, 176, 255): [57], (192, 120, 16, 255): [58], (128, 136, 176, 255): [60], (96, 104, 144, 255): [60, 61], (176, 184, 224, 255): [62], (248, 232, 40, 255): [63, 64], (208, 176, 0, 255): [63, 64, 65], (136, 96, 16, 255): [65], (112, 152, 120, 255): [66], (184, 224, 192, 255): [66], (152, 192, 160, 255): [66], (184, 168, 216, 255): [67], (144, 120, 176, 255): [67], (168, 208, 176, 255): [68], (96, 160, 96, 255): [68], (72, 144, 192, 255): [72, 73], (104, 176, 224, 255): [72, 73, 158, 158], (112, 120, 48, 255): [74], (168, 176, 96, 255): [74, 75], (120, 128, 48, 255): [75], (176, 184, 96, 255): [76], (96, 104, 32, 255): [76], (208, 176, 88, 255): [76], (152, 136, 56, 255): [76], (232, 0, 0, 255): [77], (248, 224, 32, 255): [77, 78], (248, 232, 120, 255): [78], (248, 192, 80, 255): [78, 255], (248, 96, 0, 255): [78, 146], (248, 128, 96, 255): [79], (240, 64, 32, 255): [79], (248, 160, 128, 255): [79, 173], (224, 80, 40, 255): [80], (248, 136, 104, 255): [80], (144, 184, 152, 255): [81], (208, 240, 216, 255): [81, 82], (176, 208, 184, 255): [82], (224, 224, 160, 255): [83], (192, 192, 128, 255): [83], (144, 104, 72, 255): [84], (184, 136, 80, 255): [84], (160, 120, 72, 255): [85], (200, 152, 80, 255): [85, 296], (192, 200, 232, 255): [86, 87], (224, 224, 240, 255): [86, 87, 362], (248, 248, 248, 255): [87, 176, 213, 249, 266, 359, 362], (144, 88, 152, 255): [88, 89], (192, 152, 176, 255): [88, 89], (216, 184, 232, 255): [90], (176, 136, 184, 255): [90], (168, 120, 184, 255): [91], (144, 144, 144, 255): [91], (120, 80, 128, 255): [91], (112, 72, 104, 255): [92], (80, 48, 88, 255): [92], (208, 168, 200, 255): [92], (136, 96, 128, 255): [92], (128, 88, 160, 255): [93], (192, 128, 200, 255): [93], (128, 64, 120, 255): [94], (168, 96, 144, 255): [94], (192, 128, 176, 255): [94], (216, 208, 208, 255): [95], (184, 176, 176, 255): [95], (128, 120, 120, 255): [95], (216, 184, 16, 255): [96], (248, 216, 64, 255): [96], (200, 176, 104, 255): [97], (248, 216, 96, 255): [97, 301], (248, 232, 152, 255): [97, 237], (232, 136, 72, 255): [99], (192, 104, 56, 255): [99], (248, 80, 32, 255): [100], (224, 64, 0, 255): [101], (232, 232, 232, 255): [101, 379], (248, 176, 136, 255): [102], (248, 208, 168, 255): [102], (224, 104, 80, 255): [102], (144, 104, 48, 255): [105], (192, 152, 72, 255): [105], (216, 184, 104, 255): [105], (160, 120, 88, 255): [106], (200, 160, 128, 255): [106], (224, 72, 24, 255): [108], (232, 104, 80, 255): [108], (248, 128, 80, 255): [108], (144, 80, 136, 255): [109], (184, 120, 176, 255): [109], (208, 160, 168, 255): [110, 110], (176, 104, 136, 255): [110], (128, 128, 168, 255): [111], (184, 184, 200, 255): [111], (136, 136, 144, 255): [112, 325], (192, 192, 184, 255): [112], (240, 112, 112, 255): [113], (248, 168, 168, 255): [113], (248, 208, 208, 255): [113], (16, 16, 16, 255): [114], (128, 184, 208, 255): [114], (64, 120, 144, 255): [114], (184, 160, 104, 255): [115], (152, 120, 64, 255): [115], (104, 144, 176, 255): [116], (184, 216, 248, 255): [116], (128, 168, 200, 255): [117], (104, 128, 152, 255): [117], (208, 176, 112, 255): [120], (160, 128, 48, 255): [120], (128, 64, 128, 255): [121], (168, 120, 176, 255): [121], (224, 96, 72, 255): [122], (152, 216, 72, 255): [123], (96, 184, 32, 255): [123], (184, 248, 112, 255): [123], (232, 120, 80, 255): [124], (248, 224, 152, 255): [125], (232, 48, 0, 255): [126], (248, 112, 16, 255): [126], (248, 240, 104, 255): [126], (248, 208, 0, 255): [126], (192, 168, 136, 255): [127, 263], (144, 120, 96, 255): [127], (160, 160, 128, 255): [127], (232, 192, 80, 255): [128, 128], (120, 96, 40, 255): [128], (248, 104, 32, 255): [129], (248, 168, 112, 255): [129], (128, 160, 224, 255): [130], (96, 128, 160, 255): [130], (112, 144, 200, 255): [131], (152, 184, 224, 255): [131], (208, 112, 160, 255): [132], (232, 152, 208, 255): [132], (192, 144, 80, 255): [133], (192, 176, 112, 255): [133], (56, 160, 136, 255): [134], (48, 64, 120, 255): [134], (208, 184, 48, 255): [135], (248, 248, 128, 255): [135], (232, 200, 8, 255): [136], (248, 136, 0, 255): [136], (184, 136, 40, 255): [140], (152, 104, 8, 255): [140], (112, 64, 16, 255): [140], (216, 192, 136, 255): [141], (176, 152, 96, 255): [141], (144, 168, 176, 255): [142], (200, 208, 216, 255): [142], (168, 208, 248, 255): [144], (96, 144, 200, 255): [144], (56, 104, 160, 255): [144], (248, 216, 16, 255): [146], (160, 128, 192, 255): [147], (48, 120, 168, 255): [148], (200, 168, 80, 255): [149], (240, 208, 112, 255): [149], (248, 192, 200, 255): [151], (248, 128, 120, 255): [151], (200, 232, 96, 255): [152], (152, 192, 8, 255): [152], (240, 232, 104, 255): [153], (216, 184, 40, 255): [153], (88, 168, 224, 255): [159, 160, 184, 258], (48, 128, 192, 255): [160, 258, 260], (128, 200, 248, 255): [160, 374, 375, 376], (224, 192, 80, 255): [161, 385], (144, 104, 32, 255): [161], (248, 232, 144, 255): [162], (152, 96, 72, 255): [162], (216, 208, 88, 255): [163], (120, 104, 16, 255): [163], (168, 152, 32, 255): [163], (224, 200, 96, 255): [164], (200, 160, 64, 255): [164], (232, 80, 24, 255): [165], (248, 88, 32, 255): [166], (144, 224, 64, 255): [167], (200, 248, 112, 255): [167], (248, 120, 40, 255): [168], (200, 80, 0, 255): [168], (192, 88, 200, 255): [169], (96, 120, 208, 255): [170], (160, 200, 248, 255): [170], (96, 136, 224, 255): [171], (136, 168, 248, 255): [171, 364], (248, 248, 192, 255): [172], (248, 232, 128, 255): [172, 179], (248, 200, 152, 255): [173, 174], (120, 72, 0, 255): [173], (248, 144, 112, 255): [174], (240, 240, 248, 255): [175], (200, 200, 200, 255): [175, 288, 372], (168, 168, 184, 255): [176], (80, 192, 72, 255): [177], (152, 224, 72, 255): [177], (224, 192, 96, 255): [179], (248, 144, 120, 255): [180], (248, 232, 72, 255): [181], (248, 192, 16, 255): [181], (80, 192, 48, 255): [182], (104, 144, 248, 255): [183, 298], (72, 112, 248, 255): [183], (224, 192, 104, 255): [185], (184, 152, 80, 255): [185], (144, 112, 48, 255): [185], (120, 184, 24, 255): [186], (64, 168, 32, 255): [188], (96, 200, 56, 255): [188], (136, 232, 56, 255): [188], (136, 56, 176, 255): [190], (176, 96, 224, 255): [190], (208, 200, 48, 255): [191], (104, 96, 48, 255): [191], (136, 192, 240, 255): [194], (72, 152, 208, 255): [194], (96, 160, 224, 255): [195], (168, 200, 232, 255): [195], (176, 112, 224, 255): [196], (208, 168, 224, 255): [196], (88, 80, 80, 255): [197], (144, 128, 128, 255): [197], (136, 160, 160, 255): [198], (56, 80, 80, 255): [198], (224, 104, 48, 255): [199], (248, 176, 112, 255): [199], (112, 152, 144, 255): [200], (112, 112, 112, 255): [201], (72, 152, 184, 255): [202, 230, 360], (104, 184, 216, 255): [202, 360], (152, 208, 232, 255): [202], (176, 232, 240, 255): [204], (56, 112, 160, 255): [204], (80, 168, 176, 255): [204], (224, 176, 224, 255): [205], (192, 128, 184, 255): [205], (168, 72, 136, 255): [205], (176, 128, 208, 255): [207], (216, 184, 248, 255): [207], (128, 152, 168, 255): [208], (184, 200, 192, 255): [208], (216, 224, 216, 255): [208], (224, 96, 104, 255): [209], (232, 176, 160, 255): [209], (232, 184, 248, 255): [210], (224, 152, 232, 255): [210], (208, 112, 208, 255): [210], (72, 88, 160, 255): [211], (88, 128, 192, 255): [211], (112, 168, 232, 255): [211], (200, 56, 0, 255): [212], (248, 96, 16, 255): [212], (248, 192, 112, 255): [212], (192, 56, 16, 255): [213], (96, 104, 176, 255): [214], (120, 136, 216, 255): [214], (56, 88, 72, 255): [215], (136, 168, 152, 255): [215], (160, 128, 56, 255): [216, 217, 220, 221], (248, 240, 160, 255): [216], (192, 160, 80, 255): [217, 220, 221], (216, 88, 32, 255): [218, 219], (248, 128, 72, 255): [218, 219], (248, 168, 192, 255): [222, 242], (224, 104, 136, 255): [222], (176, 216, 208, 255): [223], (136, 168, 184, 255): [223], (240, 104, 48, 255): [224], (248, 176, 104, 255): [224], (208, 56, 16, 255): [224], (208, 64, 0, 255): [225], (208, 184, 200, 255): [226], (224, 200, 224, 255): [226], (240, 224, 240, 255): [226], (160, 160, 168, 255): [227, 353], (192, 192, 200, 255): [227], (224, 224, 232, 255): [227], (80, 72, 72, 255): [228, 229, 336], (56, 48, 48, 255): [228, 229], (136, 120, 120, 255): [229], (152, 184, 240, 255): [230], (96, 144, 192, 255): [231], (152, 184, 232, 255): [231], (208, 200, 200, 255): [232], (120, 152, 152, 255): [232], (160, 192, 192, 255): [232], (168, 160, 160, 255): [232], (224, 176, 88, 255): [234], (176, 128, 48, 255): [234], (216, 216, 184, 255): [235], (136, 128, 80, 255): [235], (168, 168, 136, 255): [235], (232, 168, 248, 255): [236], (176, 48, 0, 255): [236], (184, 160, 80, 255): [237], (240, 192, 72, 255): [239], (224, 168, 0, 255): [239], (248, 120, 96, 255): [240], (208, 120, 112, 255): [241], (232, 120, 152, 255): [242], (208, 152, 40, 255): [243], (248, 200, 64, 255): [243], (128, 96, 32, 255): [244], (216, 184, 96, 255): [244], (248, 224, 144, 255): [244], (88, 112, 208, 255): [245], (168, 104, 248, 255): [245], (136, 48, 224, 255): [245], (176, 216, 176, 255): [246], (72, 96, 72, 255): [246], (112, 152, 192, 255): [247], (136, 192, 232, 255): [247], (160, 208, 160, 255): [248], (112, 160, 112, 255): [248], (216, 216, 224, 255): [249], (64, 184, 64, 255): [251], (232, 248, 208, 255): [251], (72, 136, 88, 255): [252], (56, 128, 144, 255): [253], (184, 248, 176, 255): [253], (88, 176, 104, 255): [253], (80, 160, 184, 255): [253], (248, 104, 56, 255): [255, 256], (248, 208, 96, 255): [256, 279], (208, 88, 56, 255): [256], (248, 120, 80, 255): [257], (216, 96, 48, 255): [257], (120, 192, 248, 255): [258], (144, 208, 208, 255): [259], (216, 216, 248, 255): [259], (192, 224, 248, 255): [260], (168, 184, 224, 255): [260], (80, 104, 160, 255): [260], (192, 184, 200, 255): [261], (72, 80, 96, 255): [261], (48, 48, 64, 255): [262], (192, 200, 208, 255): [262], (136, 96, 64, 255): [264], (216, 208, 176, 255): [264], (200, 80, 88, 255): [265], (240, 120, 96, 255): [265], (232, 232, 224, 255): [266], (216, 208, 224, 255): [266], (216, 176, 224, 255): [268], (232, 208, 224, 255): [268], (232, 224, 248, 255): [268], (72, 136, 40, 255): [270], (120, 208, 72, 255): [270], (168, 208, 56, 255): [271], (128, 144, 64, 255): [271], (216, 248, 192, 255): [271], (152, 192, 96, 255): [272, 272], (208, 176, 80, 255): [273], (152, 88, 48, 255): [273], (240, 192, 96, 255): [273], (200, 152, 96, 255): [274], (152, 120, 152, 255): [274], (216, 120, 80, 255): [275], (152, 88, 96, 255): [275], (72, 88, 144, 255): [276], (64, 80, 120, 255): [277], (88, 104, 168, 255): [277], (240, 232, 248, 255): [278], (192, 184, 224, 255): [278], (88, 136, 176, 255): [283], (120, 192, 208, 255): [283], (232, 192, 136, 255): [285], (248, 224, 168, 255): [285], (144, 184, 72, 255): [286], (112, 144, 48, 255): [286], (176, 144, 104, 255): [287], (224, 200, 160, 255): [287], (224, 224, 224, 255): [288], (208, 200, 176, 255): [289], (168, 136, 104, 255): [289], (224, 208, 208, 255): [290], (176, 168, 144, 255): [290], (176, 160, 56, 255): [292], (112, 88, 40, 255): [292], (232, 144, 208, 255): [293], (248, 160, 232, 255): [293], (88, 80, 136, 255): [294], (160, 152, 216, 255): [294], (80, 72, 136, 255): [295], (184, 184, 232, 255): [295], (248, 208, 80, 255): [296], (168, 96, 64, 255): [297], (232, 184, 80, 255): [297], (152, 184, 248, 255): [298], (144, 184, 176, 255): [299], (128, 144, 160, 255): [299], (184, 208, 216, 255): [299], (248, 128, 104, 255): [300], (248, 184, 64, 255): [301], (248, 248, 152, 255): [301], (160, 112, 160, 255): [302], (192, 120, 184, 255): [302], (216, 200, 200, 255): [304], (168, 168, 168, 255): [305, 306], (136, 136, 136, 255): [305, 306], (104, 104, 104, 255): [305, 306], (224, 120, 120, 255): [308], (200, 88, 80, 255): [308], (152, 216, 128, 255): [309], (104, 176, 120, 255): [309], (248, 232, 192, 255): [311, 312], (160, 216, 144, 255): [316], (128, 160, 112, 255): [316], (184, 136, 248, 255): [317], (208, 168, 248, 255): [317], (48, 104, 152, 255): [320], (96, 152, 200, 255): [320], (72, 128, 176, 255): [320], (48, 96, 248, 255): [321], (40, 80, 120, 255): [321], (80, 128, 248, 255): [321], (240, 216, 0, 255): [322], (200, 176, 56, 255): [322], (224, 104, 24, 255): [323], (232, 168, 72, 255): [323], (104, 112, 120, 255): [325], (224, 208, 160, 255): [327], (240, 224, 168, 255): [327], (192, 176, 128, 255): [327], (200, 120, 112, 255): [328], (232, 152, 72, 255): [328], (248, 184, 120, 255): [328], (104, 160, 112, 255): [330], (168, 216, 112, 255): [330, 330], (208, 248, 128, 255): [330], (168, 200, 96, 255): [331], (224, 248, 152, 255): [331], (120, 200, 104, 255): [331], (176, 208, 112, 255): [332], (200, 232, 112, 255): [332], (48, 128, 72, 255): [332], (120, 200, 248, 255): [333], (88, 144, 200, 255): [333], (168, 224, 248, 255): [333], (96, 168, 224, 255): [333], (232, 240, 248, 255): [334], (216, 216, 232, 255): [334], (192, 192, 208, 255): [334, 359], (224, 216, 224, 255): [335], (208, 192, 200, 255): [335], (192, 168, 120, 255): [337], (224, 208, 144, 255): [337], (232, 144, 56, 255): [338], (168, 96, 40, 255): [338], (200, 120, 48, 255): [338], (208, 208, 216, 255): [339], (184, 184, 192, 255): [339], (112, 136, 176, 255): [340], (80, 96, 144, 255): [340], (224, 200, 144, 255): [341], (208, 88, 8, 255): [341], (248, 192, 64, 255): [341], (184, 64, 0, 255): [342], (224, 104, 0, 255): [342], (152, 160, 64, 255): [343], (192, 192, 96, 255): [343], (104, 104, 64, 255): [344, 344], (144, 152, 120, 255): [344, 344], (176, 112, 168, 255): [345], (136, 64, 120, 255): [345], (144, 224, 120, 255): [346], (112, 176, 104, 255): [346], (208, 208, 128, 255): [349], (144, 128, 80, 255): [349], (248, 208, 176, 255): [350], (216, 184, 152, 255): [350], (248, 224, 208, 255): [350], (206, 191, 191, 255): [351], (247, 247, 242, 255): [351], (96, 176, 128, 255): [352], (160, 232, 152, 255): [352], (120, 208, 136, 255): [352], (144, 128, 136, 255): [353], (144, 144, 168, 255): [354], (112, 112, 136, 255): [354], (72, 72, 96, 255): [354], (88, 88, 80, 255): [355], (104, 104, 88, 255): [355], (136, 136, 120, 255): [355], (176, 176, 160, 255): [356], (104, 96, 88, 255): [356], (144, 128, 120, 255): [356], (200, 200, 216, 255): [362], (104, 144, 208, 255): [364], (128, 176, 224, 255): [365], (88, 136, 192, 255): [365], (56, 112, 168, 255): [365], (72, 152, 176, 255): [367], (120, 192, 216, 255): [367], (152, 216, 240, 255): [367], (232, 128, 168, 255): [368], (240, 168, 184, 255): [368], (160, 136, 128, 255): [369], (208, 184, 144, 255): [369], (120, 96, 88, 255): [369], (200, 144, 144, 255): [370], (248, 160, 120, 255): [370], (120, 120, 216, 255): [371, 373], (120, 112, 144, 255): [371], (232, 232, 200, 255): [372], (168, 168, 248, 255): [373], (48, 56, 112, 255): [374, 376], (72, 128, 208, 255): [374, 381], (88, 160, 248, 255): [375, 376, 381, 382], (232, 224, 216, 255): [377], (224, 216, 168, 255): [377], (152, 160, 216, 255): [378], (184, 208, 232, 255): [378], (128, 112, 176, 255): [378], (112, 112, 88, 255): [379], (184, 184, 176, 255): [379], (248, 104, 104, 255): [380], (200, 72, 80, 255): [380], (56, 96, 176, 255): [382], (248, 32, 40, 255): [383], (248, 120, 128, 255): [383], (168, 40, 56, 255): [383], (72, 128, 112, 255): [384, 384], (144, 216, 176, 255): [384], (248, 224, 88, 255): [385]}

def colorCompare2(col, epsilon):
	ready = []
	for keyColor in colors:
		if col[0] >= keyColor[0] - epsilon and col[0] <= keyColor[0] + epsilon and\
		   col[1] >= keyColor[1] - epsilon and col[1] <= keyColor[1] + epsilon and\
		   col[2] >= keyColor[2] - epsilon and col[2] <= keyColor[2] + epsilon:
			ready += colors[keyColor]
	if len(ready) == 0:
		return None
	return sprites[choice(ready)]

def colorCompare3(col):
	vals = []
	for color in colors:
		rmean = (col[0] + color[0]) / 2
		r = col[0] - color[0]
		g = col[1] - color[1]
		b = col[2] - color[2]
		vals.append( (sqrt(( int((512+rmean)*r*r) >> 8) + 4*g*g + ( int((767-rmean)*b*b)>>8)), color) )
		
	minimal = min(vals)
	
	return sprites[choice(colors[minimal[1]])]

def colorCompare4(col):
	vals = []
	for color in colors:
		vals.append( (sqrt( (col[0] - color[0])**2 + (col[1] - color[1])**2 + (col[2] - color[2])**2 ), color))
		
	minimal = min(vals)
	return sprites[choice(colors[minimal[1]])]
	
def colorCompare5(col):
	vals = []
	lab2 = rgb2lab(col)
	for color in colors:
		lab1 = rgb2lab(color)
		
		value = cie94(lab1, lab2)
		
		vals.append((value, color))
		
	minimal = min(vals, key=lambda x: x[0])
	return sprites[choice(colors[minimal[1]])]


def rgb(x):
    """Convert #[AA]RRGGBB color in integer or string to (r,g,b) tuple
    
    Alpha (AA) component is simply ignored.
    
    rgb(0xff0000ff)
    >>> (0, 0, 255)
    rgb('#ff0000')
    >>> (255, 0, 0)
    """
    
    if isinstance(x, str) and x[0] == '#':
        x = int(x[1:], 16)
    return ((x >> 16) & 0xff, (x >> 8) & 0xff, (x) & 0xff)
def cie94(L1_a1_b1, L2_a2_b2):
    """Calculate color difference by using CIE94 formulae
    
    See http://en.wikipedia.org/wiki/Color_difference or
    http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE94.html.
    
    cie94(rgb2lab((255, 255, 255)), rgb2lab((0, 0, 0)))
    >>> 58.0
    cie94(rgb2lab(rgb(0xff0000)), rgb2lab(rgb('#ff0000')))
    >>> 0.0
    """
    
    L1, a1, b1 = L1_a1_b1
    L2, a2, b2 = L2_a2_b2

    C1 = sqrt(_square(a1) + _square(b1))
    C2 = sqrt(_square(a2) + _square(b2))
    delta_L = L1 - L2
    delta_C = C1 - C2
    delta_a = a1 - a2
    delta_b = b1 - b2
    delta_H_square = _square(delta_a) + _square(delta_b) - _square(delta_C)
    return (sqrt(_square(delta_L)
            + _square(delta_C) / _square(1.0 + 0.045 * C1)
            + delta_H_square / _square(1.0 + 0.015 * C1)))
def rgb2lab(R_G_B):
    """Convert RGB colorspace to Lab
    
    Adapted from http://www.easyrgb.com/index.php?X=MATH.
    """
    
    R, G, B, A = R_G_B
    # Convert RGB to XYZ
    var_R = ( R / 255.0 )        # R from 0 to 255
    var_G = ( G / 255.0 )        # G from 0 to 255
    var_B = ( B / 255.0 )        # B from 0 to 255

    if ( var_R > 0.04045 ): var_R = ( ( var_R + 0.055 ) / 1.055 ) ** 2.4
    else:                   var_R = var_R / 12.92
    if ( var_G > 0.04045 ): var_G = ( ( var_G + 0.055 ) / 1.055 ) ** 2.4
    else:                   var_G = var_G / 12.92
    if ( var_B > 0.04045 ): var_B = ( ( var_B + 0.055 ) / 1.055 ) ** 2.4
    else:                   var_B = var_B / 12.92

    var_R = var_R * 100.0
    var_G = var_G * 100.0
    var_B = var_B * 100.0

    # Observer. = 2°, Illuminant = D65
    X = var_R * 0.4124 + var_G * 0.3576 + var_B * 0.1805
    Y = var_R * 0.2126 + var_G * 0.7152 + var_B * 0.0722
    Z = var_R * 0.0193 + var_G * 0.1192 + var_B * 0.9505
    
    # Convert XYZ to L*a*b*
    
    var_X = X / 95.047         # ref_X =  95.047   Observer= 2°, Illuminant= D65
    var_Y = Y / 100.000        # ref_Y = 100.000
    var_Z = Z / 108.883        # ref_Z = 108.883

    if ( var_X > 0.008856 ): var_X = var_X ** ( 1.0/3.0 )
    else:                    var_X = ( 7.787 * var_X ) + ( 16.0 / 116.0 )
    if ( var_Y > 0.008856 ): var_Y = var_Y ** ( 1.0/3.0 )
    else:                    var_Y = ( 7.787 * var_Y ) + ( 16.0 / 116.0 )
    if ( var_Z > 0.008856 ): var_Z = var_Z ** ( 1.0/3.0 )
    else:                    var_Z = ( 7.787 * var_Z ) + ( 16.0 / 116.0 )

    CIE_L = ( 116.0 * var_Y ) - 16.0
    CIE_a = 500.0 * ( var_X - var_Y )
    CIE_b = 200.0 * ( var_Y - var_Z )
    return (CIE_L, CIE_a, CIE_b)
def _old_rgb2lab(R_G_B):
    """Old implementation of rgb2lab, the result is strange :D
    
    Adapted from http://www.f4.fhtw-berlin.de/~barthel/ImageJ/ColorInspector//HTMLHelp/farbraumJava.htm.
    """
    
    R, G, B = R_G_B

    # http://www.brucelindbloom.com

    eps = 216.0/24389.0
    k = 24389.0/27.0

    Xr = 0.964221  # reference white D50
    Yr = 1.0
    Zr = 0.825211

    # RGB to XYZ
    r = R/255.0 #R 0..1
    g = G/255.0 #G 0..1
    b = B/255.0 #B 0..1
    
    if not (0<=r<=1 and 0<=g<=1 and 0<=b<=1):
        raise ValueError('RGB out of 0..255 range')

    # assuming sRGB (D65)
    if r <= 0.04045:
        r = r/12
    else:
        r = ((r+0.055)/1.055) ** 2.4

    if g <= 0.04045:
        g = g/12
    else:
        g = ((g+0.055)/1.055) ** 2.4

    if b <= 0.04045:
        b = b/12
    else:
        b = ((b+0.055)/1.055) ** 2.4

    X =  0.436052025*r     + 0.385081593*g + 0.143087414 *b
    Y =  0.222491598*r     + 0.71688606 *g + 0.060621486 *b
    Z =  0.013929122*r     + 0.097097002*g + 0.71418547  *b

    # XYZ to Lab
    xr = X/Xr
    yr = Y/Yr
    zr = Z/Zr

    if xr > eps:
        fx =  xr ** (1.0/3.0)
    else:
        fx = (k * xr + 16.0) / 116.0

    if yr > eps:
        fy =  yr ** (1.0/3.0)
    else:
        fy = (k * yr + 16.0) / 116.0

    if zr > eps:
        fz =  zr ** (1.0/3.0)
    else:
        fz = (k * zr + 16.0) / 116.0

    Ls = ( 116 * fy ) - 16
    as_ = 500*(fx-fy)
    bs = 200*(fy-fz)

    return (int(2.55*Ls + 0.5), # L
            int(as_ + 0.5),     # a
            int(bs + 0.5))      # b
def _square(x):
    return x * x
	
	
	

if True: #process using color compare
	for y in range(winHeight):
		for x in range(winWidth):
	
			currentPos = (x,y)
			draw = True
			
			if used.get_at(currentPos) == (255,0,0):
				continue
			
			radius = 20
			for i in range(10):
				checkX = int(currentPos[0] + radius * cos(2*pi*i/10))
				checkY = int(currentPos[1] + radius * sin(2*pi*i/10))
				
				if checkX < 0 or checkX >= winWidth or checkY < 0 or checkY >= winHeight:
					continue
				
				if used.get_at((checkX, checkY)) == (255,0,0):
					draw = False
					break
					
			if not draw:
				continue
			
			
			currentCol = image.get_at(currentPos)
			spr = colorCompare5(currentCol)
			if not spr:
				continue
				
			radius = min([spr.get_width()//2, spr.get_height()//2])
			
			for i in range(10):
				checkX = int(currentPos[0] + radius * cos(2*pi*i/10))
				checkY = int(currentPos[1] + radius * sin(2*pi*i/10))
				
				if checkX < 0 or checkX >= winWidth or checkY < 0 or checkY >= winHeight:
					continue
				
				if used.get_at((checkX, checkY)) == (255,0,0):
					draw = False
					break
			
			if draw:
			
				
				result.blit(spr, (currentPos[0] - spr.get_width()//2, currentPos[1] - spr.get_height()//2))
				pygame.draw.circle(used, (255,0,0), currentPos, radius)
				
				win.blit(result, (0,0)); pygame.display.update()

################################################################################ Main Loop
run = True
while run:
	
	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			run = False

			
		#################### <color changing>
		# if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
			# color = win.get_at(pygame.mouse.get_pos())
			# if not color in indexColor2[index][1]:
				# indexColor2[index][1].append(color)
		
		# if event.type == pygame.MOUSEBUTTONDOWN and event.button == 3:
			# color = win.get_at(pygame.mouse.get_pos())
			# if color in indexColor2[index][1]:
				# indexColor2[index][1].remove(color)
			
		# if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
			# index += 1
			
		# if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
			# index -= 1
		################### <\color changing>
				
	keys = pygame.key.get_pressed()
	if keys[pygame.K_ESCAPE]:
		run = False
		
	# step:
	
	#################### <color changing>
	# win.fill((255,255,255))
	# win.blit(pygame.transform.scale(sprites[index], (sprites[index].get_width()*8, sprites[index].get_height()*8)), (0,0))
	# for i in range(0, len(indexColor2[index][1])):
		# pygame.draw.rect(win, indexColor2[index][1][i], ((winWidth-70, 0 + i*70), (50,50)))
	################### <\color changing>
	
	# mousePos = pygame.mouse.get_pos()
	# if currentB:
		# win.blit(currentB, mousePos)
	
	# win.blit(myfont.render(str(win.get_at(mousePos)), False, (0,0,0)), (mousePos))
	
	# win.blit(image, (0,0))
	# mousePos = pygame.mouse.get_pos()
	# color = image.get_at(mousePos)
	# spr = colorCompare5(color)
	# if spr:
		# win.blit(spr, (mousePos[0]+1, mousePos[1]+1))
	
	
	win.blit(result, (0,0))
	
	
	pygame.display.update()
pygame.image.save(result, "pokemons.jpg")

# file.write(str(indexColor2))

pygame.quit()














